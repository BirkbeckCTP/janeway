#!/usr/bin/env python -W ignore::DeprecationWarning
__copyright__ = "Copyright 2017 Birkbeck, University of London"
__author__ = "Martin Paul Eve & Andy Byers"
__license__ = "AGPL v3"
__maintainer__ = "Birkbeck Centre for Technology and Publishing"

"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 1.8.5.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
import sys
import logging
import configparser as configparser
from django.contrib import messages
from core import plugin_installed_apps

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) # ll: /path/to/janeway/src
PROJECT_DIR = os.path.dirname(BASE_DIR) # ll: /path/to/janeway
sys.path.append(os.path.join(BASE_DIR, "plugins"))

CFG_NAME = 'app.cfg'
DYNCONFIG = configparser.SafeConfigParser(**{
    'allow_no_value': True,
    'defaults': {'dir': PROJECT_DIR, 'base': BASE_DIR}})
DYNCONFIG.read(os.path.join(PROJECT_DIR, CFG_NAME)) # ll: /path/to/janeway/app.cfg

def cfg(path, default=0xDEADBEEF):
    lu = {'True': True, 'true': True, 'False': False, 'false': False} # cast any obvious booleans
    try:
        val = DYNCONFIG.get(*path.split('.'))
        return lu.get(val, val)
    except (configparser.NoOptionError, configparser.NoSectionError): # given key in section hasn't been defined
        if default == 0xDEADBEEF:
            raise ValueError("no value/section set for setting at %r" % path)
        return default
    except Exception as err:
        print('error on %r: %s' % (path, err))

SECRET_KEY = cfg('general.secret-key')

DEBUG = cfg('general.debug', True)

ALLOWED_HOSTS = cfg('general.allowed-hosts', '').split(',')

ENABLE_TEXTURE = False


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.humanize',

    # Installed Apps
    'cms',
    'core',
    'copyediting',
    'cron',
    'events',
    'identifiers',
    'journal',
    'metrics',
    'comms',
    'preprint',
    'press',
    'production',
    'proofing',
    'review',
    'reports',
    'security',
    'submission',
    'transform',
    'utils',
    'install',

    # 3rd Party
    'django_summernote',
    'dynamicsites',
    'markdown_deux',
    'foundationform',
    'hvad',
    'raven.contrib.django.raven_compat',
    'bootstrap4',
    'rest_framework',
    'materialize',
]

INSTALLED_APPS += plugin_installed_apps.load_plugin_apps()
INSTALLED_APPS += plugin_installed_apps.load_homepage_element_apps()

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'core.middleware.SiteSettingsMiddleware',
    'utils.template_override_middleware.ThemeEngineMiddleware',
    'core.middleware.MaintenanceModeMiddleware',
    'cron.middleware.CronMiddleware',
    'core.middleware.CounterCookieMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'core.middleware.PressMiddleware',
    'core.middleware.GlobalRequestMiddleware',
    'django.middleware.gzip.GZipMiddleware',
)

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates'),
                 os.path.join(BASE_DIR, 'templates', 'admin')] + plugin_installed_apps.load_plugin_templates() +
        plugin_installed_apps.load_homepage_element_templates(),
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'core.context_processors.journal',
                'core.context_processors.journal_settings',
                'core.context_processors.press',
                'core.context_processors.active',
                'core.context_processors.navigation',
                'django_settings_export.settings_export',
                'django.template.context_processors.i18n'
            ],
            'loaders': [
                'utils.template_override_middleware.Loader',
                'django.template.loaders.filesystem.Loader',
                'django.template.loaders.app_directories.Loader',
            ],
            'builtins': [
                'core.templatetags.pathurl',
            ],
        },
    },
]

SETTINGS_EXPORT = [
    'ORCID_API_URL',
    'ORCID_TOKEN_URL',
    'ORCID_CLIENT_SECRET',
    'ORCID_CLIENT_ID',
    'ORCID_URL',
    'ENABLE_ENHANCED_MAILGUN_FEATURES',
]


WSGI_APPLICATION = 'core.wsgi.application'
SITES_DIR = os.path.join(BASE_DIR, 'sites')
DEFAULT_HOST = 'https://www.example.org'  # This is the default redirect if no other sites are found.

# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases
# We recommend mysql but Django supports PGSQL and SQLite amongst others

DATABASES = {
    'default': {
        'ENGINE': cfg('database.engine'),
        'NAME': cfg('database.name'),
        'USER': cfg('database.user', ''),
        'PASSWORD': cfg('database.password', ''),
        'HOST': cfg('database.host', ''),
        'PORT': cfg('database.port', '')
    }
}
if cfg('database.engine') == 'django.db.backends.mysql':
    DATABASES['default']['OPTIONS'] = {'init_command': 'SET default_storage_engine=INNODB'}

# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en'
TIME_ZONE = 'UTC'
LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'core', 'locales')
] + plugin_installed_apps.load_plugin_locales()


def ugettext(s):
    return s


LANGUAGES = (
    ('en', ugettext('English')),
    ('fr', ugettext('French')),
    ('de', ugettext('German')),
)

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

USE_I18N = True
USE_L10N = False
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.7/howto/static-files/
STATIC_ROOT = os.path.join(BASE_DIR, 'collected-static')
STATICFILES_DIRS = (
    # The /src/static/ folder is used by Janeway and should not be removed.
    os.path.join(BASE_DIR, 'static'),
)
STATIC_URL = '/static/'


SUMMERNOTE_CONFIG = {
    # Using SummernoteWidget - iframe mode
    'iframe': True,  # or set False to use SummernoteInplaceWidget - no iframe mode

    # Using Summernote Air-mode
    'airMode': False,

    # Use native HTML tags (`<b>`, `<i>`, ...) instead of style attributes
    # (Firefox, Chrome only)
    'styleWithTags': True,

    # Set text direction : 'left to right' is default.
    'direction': 'ltr',

    # Change editor size
    'width': '100%',
    'height': '480',

    # Need authentication while uploading attachments.
    'attachment_require_authentication': True,
}

# 1.9 appears confused about where null and blank are required for many to
# many fields, so we're hiding these warning from the console
# TODO: code smell, revisit
SILENCED_SYSTEM_CHECKS = (
    'fields.W340',
)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    # TODO: do we really need to be affecting the root logger here?
    'root': {
        'level': 'WARNING',
        'handlers': [],
    },
    
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s '
                      '%(process)d %(thread)d %(message)s'
        },
    },
    
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        }
    },
    
    'loggers': {
        'django.db.backends': {
            'level': 'ERROR',
            'handlers': ['console'],
            'propagate': False,
        },
    },
}

RAVEN_CONFIG = {
    'dsn': cfg('sentry.raven-dsn', ''),
}

if cfg('general.sentry-logging', False):
    LOGGING['handlers']['sentry'] = {
        'level': 'ERROR', # To capture more than ERROR, change to WARNING, INFO, etc.
        'class': 'raven.contrib.django.raven_compat.handlers.SentryHandler',
        'tags': {'custom-tag': 'x'},
    }
    LOGGING['root']['handlers'].append('sentry')
    LOGGING['loggers'].update({
        'sentry.errors': {
            'level': 'DEBUG',
            'handlers': ['console'],
            'propagate': False,
        },
        'raven': {
            'level': 'DEBUG',
            'handlers': ['console'],
            'propagate': False,
        }
    })


# TODO: code smell, remove
class SuppressDeprecated(logging.Filter):
    def filter(self, record):
        WARNINGS_TO_SUPPRESS = [
            'RemovedInDjango110Warning',
        ]
        # Return false to suppress message.
        return not any([warn in record.getMessage() for warn in WARNINGS_TO_SUPPRESS])


MESSAGE_TAGS = {
    messages.ERROR: 'danger',
}

LOGIN_REDIRECT_URL = '/user/profile/'
LOGIN_URL = '/login/'

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = ''
EMAIL_PORT = ''
EMAIL_HOST_USER = ''
EMAIL_HOST_PASSWORD = ''
EMAIL_USE_TLS = True

# Settings for use with Mailgun
MAILGUN_ACCESS_KEY = ''
MAILGUN_SERVER_NAME = ''
MAILGUN_REQUIRE_TLS = False
ENABLE_ENHANCED_MAILGUN_FEATURES = False  # Enables email tracking


DATE_FORMT = "Y-m-d"
DATETIME_FORMAT = "Y-m-d H:i"

AUTH_USER_MODEL = 'core.Account'

PLUGIN_HOOKS = {}

NOTIFY_FUNCS = []

ORCID_API_URL = 'https://pub.orcid.org/v1.2_rc7/'
ORCID_URL = 'https://orcid.org/oauth/authorize'
ORCID_TOKEN_URL = 'https://pub.orcid.org/oauth/token'
ORCID_CLIENT_SECRET = cfg('orcid.client-secret', '')
ORCID_CLIENT_ID = cfg('orcid.client-id', '')


SESSION_COOKIE_NAME = 'JANEWAYSESSID'

S3_ACCESS_KEY = cfg('s3.access-key', '')
S3_SECRET_KEY = cfg('s3.secret-key', '')
S3_BUCKET_NAME = cfg('s3.bucket-name', '')
END_POINT = cfg('s3.region', 'eu-west-2')  # ll: eu-west-1, us-east-1
S3_HOST = 's3.{region}.amazonaws.com'.format(region=END_POINT)

BACKUP_TYPE = 'directory'  # s3 or directory
BACKUP_DIR = '/path/to/backup/dir/'
BACKUP_EMAIL = False  # If set to True, will send an email each time backup is run

URL_CONFIG = 'domain'  # path or domain

# Captcha
# You can get reCaptcha keys for your domain here: https://developers.google.com/recaptcha/intro
# You can set either to use Google's reCaptcha or a basic math field with no external requirements
CAPTCHA_TYPE = cfg('captcha.type', 'recaptcha')  # should be either simple_math or recaptcha to enable captcha fields

if CAPTCHA_TYPE == 'recaptcha':
    INSTALLED_APPS.append('snowpenguin.django.recaptcha2')

RECAPTCHA_PRIVATE_KEY = cfg('captcha.recaptcha-private-key', 'your private key')
RECAPTCHA_PUBLIC_KEY = cfg('captcha.recaptcha-public-key', 'your public key')

SILENT_IMPORT_CACHE = False
